{% extends 'MetadorManualBundle::template.html.twig' %}

{% block manual %}
    # Benutzerhandbuch

    Das folgende Handbuch erläutert die Bedienung und die Funktionen der Metadatenlösung. Die eingesetzte Software nennt sich Metador. Metador ist eine einfach zu bedienende Web-Anwendung zum Erstellen und Bearbeiten von Metadaten entsprechend den ISO und INSPIRE konformen Metadatenschemata für unterschiedliche Profile: Datensätze, Datensatzserien, Tiles, Dienste.

    ## Allgemein

    Der Aufruf von Metador geschieht in der Regel über folgende URL.

    - {{ url('metador_home') }}

    Es erscheint die Startseite von Metador, auf welcher die aktuell öffentlichen Metadaten gelistet werden, in der eine Suchmaske eingeblendet ist und an der man sich mit dem Benutzernamen und Passwort anmelden kann.

    ## Passwort ändern

    Das eigene Passwort kann über den den Login/Logout Knopf geändert werden. Dies ist natürlich erst nach der Anmeldung möglich.

    {% if app.user %}

    <a href="{{ path('metador_user_profile', { id: app.user.id }) }}" target="_blank">
        ![Passwort ändern]({{ asset('bundles/metadormanual/index/passwort_aendern.png') }})
    </a>
    {% else %}

    ![Passwort ändern]({{ asset('bundles/metadormanual/index/passwort_aendern.png') }})
    {% endif %}
{% endblock %}


{% block devmanual %}
    # Enwicklung

    ## Benutzerhandbuch-Eintrag

    Um das Menü zu erweitern, wird als erstes ein Controller benötigt.
    ```php
    <?php
    namespace Plugins\WhereGroup\ManualBundle\Controller;

    use Symfony\Bundle\FrameworkBundle\Controller\Controller;
    use Symfony\Component\Routing\Annotation\Route;

    /**
     * @Route("/public/manual")
     */
    class ManualController extends Controller
    {
        /**
         * @Route("/user", name="manual_user", methods={"GET"})
         */
        public function userAction()
        {
            $this->denyAccessUnlessGranted('ROLE_SYSTEM_SUPERUSER');
            return $this->render('@MetadorManual/Manual/user.html.twig');
        }
    }
    ```
    Das Template sieht wie folgt aus.
    ```twig
    {% verbatim %}{% extends 'MetadorManualBundle::template.html.twig' %}

    {% block manual %}
        # Überschrift

        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
    {% endblock %}

    {% block devmanual %}
        # Entwicklung

        {# Codebeispiele #}
    {% endblock %}{% endverbatim %}
    ```
    Um einen Menüpunkt zu erstellen muss folgender ApplicationListener erstellt werden. Dieser wird benachrichtigt sobald das Benutzerhandbuch-Menü aufgebaut wird und hängt sich rein.
    ```php
    <?php

    namespace Plugins\WhereGroup\ManualBundle\EventListener;

    use WhereGroup\CoreBundle\Event\ApplicationEvent;

    class ApplicationListener
    {
        public function onLoading(ApplicationEvent $event)
        {
            $app = $event->getApplication();

            if ($app->routeStartsWith('manual')) {
                $app->add(
                    $app->get('ManualMenu', 'user')
                        ->icon('icon-user')
                        ->label('Benutzer')
                        ->path('manual_user')
                        ->setRole('ROLE_SYSTEM_SUPERUSER')
                    );
            }
        }
    }
    ```
    Damit der ApplicationListener aufgerufen wird, muss vorher noch die **services.xml** im Bundle erweitert werden.
    ```xml
    <service id="metador.manual.app.listener" class="Plugins\WhereGroup\ManualBundle\EventListener\ApplicationListener">
        <tag name="kernel.event_listener" event="application.loading" method="onLoading"/>
    </service>
    ```
{% endblock %}
